<?php

namespace Family\Bundle\TreeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PersonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonRepository extends EntityRepository
{
	private $alphabet = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H');

	public function findByFamilyOrderedByName($familyId)
    {
        $query = $this->createQueryBuilder('p')
	        ->where('p.family = :id')
	        ->orderBy('p.lastName, p.firstName', 'ASC')
	        ->setParameter('id', $familyId)
	        ->getQuery();
        return $query->getResult();
	}

	public function findByFamilyOrderedByFirstname($familyId)
    {
        $query = $this->createQueryBuilder('p')
	        ->where('p.family = :id')
	        ->orderBy('p.firstName, p.lastName', 'ASC')
	        ->setParameter('id', $familyId)
	        ->getQuery();
        return $query->getResult();
	}

	public function findByFamilyOrderedByBirthdate($familyId)
    {
        $query = $this->createQueryBuilder('p')
	        ->where('p.family = :id')
	        ->orderBy('p.birthDate, p.deathDate, p.lastName, p.firstName', 'ASC')
	        ->setParameter('id', $familyId)
	        ->getQuery();
        return $query->getResult();
	}

	public function findAllFrequenciesForFamily($familyId)
    {
        $query = $this->createQueryBuilder('p')
        	->select('p.lastName, COUNT(p.lastName) as nbr')
	        ->where('p.family = :id')
	        ->groupBy('p.lastName')
	        ->orderBy('nbr', 'desc')
	        ->setMaxResults(40)
	        ->setParameter('id', $familyId)
	        ->getQuery();
        return $query->getResult();
	}

	public function countForFamily($familyId)
    {
        $query = $this->createQueryBuilder('p')
        	->select('COUNT(p)')
	        ->where('p.family = :id')
	        ->setParameter('id', $familyId)
	        ->getQuery();
        return $query->getSingleScalarResult();
	}

	public function getPotentialMatesQB($id)
	{
		$person = $this->createQueryBuilder('p')
	        ->where('p.id = :id')
	        ->setParameter('id', $id)
	        ->getQuery()->getSingleResult();

        return $this->createQueryBuilder('p')
	        ->where('p.id != :id')
	        ->andWhere('p.id != :id')
	        ->andWhere('p.family = :family')
	        /*->andWhere("p.birthDate > DATE_ADD(:bd,1200, 'month')")
	        ->andWhere("NOT DATE_SUB(p.birthDate,120, 'month') > :dd")
	        ->andWhere("NOT p.deathDate > DATE_ADD(:bd,120, 'month')")
	        ->andWhere("NOT p.deathDate < DATE_ADD(:dd,1200, 'month')")*/
	        ->setParameter('id', $id)
	        ->setParameter('family', $person->getFamily()->getId())
	        /*->setParameter('bd', $person->getBirthDate())
	        ->setParameter('dd', $person->getDeathDate())*/;
	}

	public function getPotentialParentsQB($personId, $familyId)
	{
		if($personId == null) {
	        return $this->createQueryBuilder('p')
		        ->andWhere('p.family = :family')
		        ->setParameter('family', $familyId);
		} else {
			if ($familyId == null) {
				$person = $this->createQueryBuilder('p')
			        ->where('p.id = :id')
			        ->setParameter('id', $personId)
			        ->getQuery()->getSingleResult();
			    $familyId = $person->getFamily()->getId();
			}

	        return $this->createQueryBuilder('p')
		        ->andWhere('p.id != :id')
		        ->andWhere('p.family = :family')
		        ->setParameter('id', $personId)
		        ->setParameter('family', $familyId);
		}
	}

	public function findWithNameContaining($search, $familyId = null, $sameFamily = true)
	{
		$terms = array_slice(explode(" ", $search), 0, 5);
        $query = $this->getNamesForOneTerm($terms, $familyId, $sameFamily);
    	for ($i=0; $i < count($terms) ; $i++) { 
    		$query->setParameter('search'.$this->alphabet[$i+1], '%'.$terms[$i].'%');
    	}
    	if ($familyId != null) {
    		$query->setParameter('familyId', $familyId);
    	}
        return $query->setMaxResults(10)->getQuery()->getResult();
	}

	private function getNamesForOneTerm($terms, $familyId, $sameFamily)
	{
		$c = $this->alphabet[count($terms)];
        $query = $this->createQueryBuilder('p'.$c)
	        ->where('p'.$c.'.firstName LIKE :search'.$c)
	        ->orWhere('p'.$c.'.lastName LIKE :search'.$c)
	        ->orWhere('p'.$c.'.middleNames LIKE :search'.$c)
	        ->orWhere('p'.$c.'.surName LIKE :search'.$c);
	    if ($familyId != null) {
	    	if ($sameFamily) {
	    		$query->andWhere('p'.$c.'.family = :familyId');
	    	} else {
	    		$query->andWhere('p'.$c.'.family <> :familyId');
	    	}
	    }
	    if (count($terms) > 1) {
	    	$query->andWhere('p'.$c.' in ('
	    		.$this->getNamesForOneTerm(array_slice ($terms, 1), $familyId, $sameFamily)->getDQL()
	    		.')');
	    }
	    return $query;
	}
}
